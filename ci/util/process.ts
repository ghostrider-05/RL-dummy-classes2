import { spawn } from 'node:child_process'
import { writeFile } from 'node:fs/promises';

import { LocalClassesInstallation } from '@kismet.ts/parsers-node'

declare global {
    namespace NodeJS {
        interface ProcessEnv {
            DUMMY_CLASSES_SHA: string;
            DUMMY_CLASSES_FORK_SHA: string;
            GITHUB_TOKEN: string;
            VERSION: string;
            EXTRACTED_SRC: string;
            UDK_SRC: string;
            UDK_SRC_DUMMY: string;
            UDK_CMD: string;
        }
    }
}

export function createProcess (
    cmd: string,
    args: string[],
    options: {
        cwd?: string,
        error?: {
            filter?: (code: number | null) => boolean,
            message: string,
        },
    } & Partial<Record<'onError' | 'onMessage', (data: string) => void>>,
) {
    return new Promise<number | null>((resolve, reject) => {
        const proc = spawn(cmd, args, { cwd: options.cwd })

        proc.stdout.on('data', (data: Buffer) => {
            options.onMessage?.(data.toString())
        });

        proc.stderr.on('data', (data: Buffer) => {
            options.onError?.(data.toString())
        });

        proc.on('close', (code) => {
            const rejected = options.error != undefined 
                && (options.error.filter ?? ((code) => code !== 0))(code)

            if (rejected) {
                reject(options.error!.message);
            } else {
                resolve(code)
            }
        })
    })
}

export async function writeChangelog (src: string) {
    const local = new LocalClassesInstallation(process.env.UDK_SRC_DUMMY, { 
        path: process.env.EXTRACTED_SRC, 
        packageNames: ['Engine', 'GameFramework', 'SubstanceAir'],
    })

    const diff = local.compare(src)
    const commit = '5792da090da1951ceec8ed6a71ff3acd6c4eda45'

    const content = LocalClassesInstallation.createChangelog(diff, {
        difference: { 
            includeKismet: true 
        },
        description: `Changes between an installation with [dummy classes](https://github.com/RocketLeagueMapmaking/RL-Dummy-Classes/tree/${commit}) and autogenerated dummy classes (${process.env.VERSION})`
    })

    await writeFile('./ci/changelog/kismet.json', local.formatClasses(diff, 'kismet'))
    await writeFile('./ci/changelog/classes.json', local.formatClasses(diff))
    await writeFile('./CHANGELOG.md', content)
}
