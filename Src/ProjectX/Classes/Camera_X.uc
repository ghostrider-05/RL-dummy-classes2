/*******************************************************************************
* Camera_X generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class Camera_X extends Camera
	transient
	hidecategories(Navigation);

struct native CameraKnockBase
{
	var() float BlendInTime;
	var() float BlendOutTime;
	var() float Falloff;
	var transient float Time;

	structdefaultproperties
	{
		BlendInTime=0.0
		BlendOutTime=0.0
		Falloff=1.0
		Time=0.0
	}
};

struct native LocationCameraKnock extends Camera_X.CameraKnockBase
{
	var() Vector Amount;
};

struct native RotationCameraKnock extends Camera_X.CameraKnockBase
{
	var() Rotator Amount;
};

struct native CameraOrientation
{
	var Vector Focus;
	var Rotator Rotation;
	var float Distance;
	var float FOV;
	var Vector CalculatedLocation;

	structdefaultproperties
	{
		Focus=(X=0.0,Y=0.0,Z=0.0)
		Rotation=(Pitch=0,Yaw=0,Roll=0)
		Distance=0.0
		FOV=0.0
		CalculatedLocation=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct VectorInterpRate
{
	var float MaxDistance;
	var float InterpRate;
	var float ForwardScale;
	var float BackwardScale;
	var float SideScale;
	var float UpDownScale;

	structdefaultproperties
	{
		MaxDistance=0.0
		InterpRate=0.0
		ForwardScale=1.0
		BackwardScale=1.0
		SideScale=1.0
		UpDownScale=1.0
	}
};

var() array<CameraState_X> States;
var transient Rotator PCDeltaRotation;
var transient Rotator OldControllerRotation;
var transient Vector PCDeltaLocation;
var transient Vector OldControllerLocation;
var transient CameraOrientation PreProcessPOV;
var transient CameraOrientation PostProcessPOV;
var export editinline CameraStateBlender_X Blender;
var const transient Vector ShakeLocationOffset;
var const transient Rotator ShakeRotationOffset;
var const transient float ShakeFOVOffset;
var transient Color StartFadeColor;
var transient Color EndFadeColor;
var transient Vector ClipOffset;
var transient array<LocationCameraKnock> LocationKnocks;
var transient array<RotationCameraKnock> RotationKnocks;
var transient bool bDisableCameraShake;
var transient bool bSnapNextTransition;

defaultproperties
{
	Blender=CameraStateBlender_X'Default__Camera_X.StateBlender0'
	CameraShakeCamModClass=class'CameraModifier_CameraShake_X'
}