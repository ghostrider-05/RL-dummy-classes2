/*******************************************************************************
* _TourTypes_TA generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class _TourTypes_TA extends Object
	abstract;

const TOUR_MATCH_NONE = -1;

enum ETourSeedType
{
	TourSeedType_Skill,
	TourSeedType_Random,
	TourSeedType_MAX
};

struct TourReward
{
	var array<OnlineProductData> Rewards;
	var int Placement;

	structdefaultproperties
	{
		Rewards.Empty
		Placement=0
	}
};

struct TourPlayer
{
	var UniqueNetId PlayerID;
	var string PlayerName;
	var transient Texture Avatar;

	structdefaultproperties
	{
		
		PlayerName=""
		Avatar=None
	}
};

struct TourTeam
{
	var Qword TeamID;
	var CustomMatchTeamSettings Settings;
	var array<TourPlayer> Players;
	var Qword Seed;
	var int Difficulty;

	structdefaultproperties
	{
		
		Settings=(Name="",Colors=(TeamColorID=0,CustomColorID=0,bTeamColorSet=false,bCustomColorSet=false),GameScore=0)
		Players.Empty
		
		Difficulty=0
	}
};

struct TourMatchGame
{
	var int GameTimeSeconds;
	var bool bOverTime;
	var bool bAborted;
	var Qword Winner;
	var int Scores[2];

	structdefaultproperties
	{
		GameTimeSeconds=0
		bOverTime=false
		bAborted=false
		
		Scores[0]=0
		Scores[1]=0
	}
};

struct TourPlayerStats
{
	var UniqueNetId PlayerID;
	var int TeamNum;
	var int Score;
	var int Saves;
	var int Shots;
	var int Goals;
	var int Assists;

	structdefaultproperties
	{
		
		TeamNum=0
		Score=0
		Saves=0
		Shots=0
		Goals=0
		Assists=0
	}
};

struct TourMatch
{
	var int MatchID;
	var Qword Teams[2];
	var Qword Winner;
	var array<TourMatchGame> Games;

	structdefaultproperties
	{
		MatchID=-1
		
		
		
		Games.Empty
	}
};

struct IntPair
{
	var int A;
	var int B;

	structdefaultproperties
	{
		A=0
		B=0
	}
};

struct QWORDPair
{
	var Qword A;
	var Qword B;

	structdefaultproperties
	{
		
		
	}
};

struct TourMatchNode
{
	var int MatchID;
	var int Round;
	var int Order;
	var QWORDPair Teams;
	var int NextMatchID;
	var IntPair PrevMatch;

	structdefaultproperties
	{
		MatchID=-1
		Round=0
		Order=0
		
		NextMatchID=-1
		PrevMatch=(A=0,B=0)
	}
};

struct TourPlacementInfo
{
	var databinding int Placement;
	var databinding string Name;
	var databinding int Value;
	var databinding Qword TeamID;
	var databinding UniqueNetId PlayerID;

	structdefaultproperties
	{
		Placement=0
		Name=""
		Value=0
		
		
	}
};

struct TourLeaderboard
{
	var array<TourPlacementInfo> TeamGoals;
	var array<TourPlacementInfo> PlayerGoals;
	var array<TourPlacementInfo> PlayerAssists;
	var array<TourPlacementInfo> PlayerSaves;

	structdefaultproperties
	{
		TeamGoals.Empty
		PlayerGoals.Empty
		PlayerAssists.Empty
		PlayerSaves.Empty
	}
};

struct TourMatchPlayerStats
{
	var databinding name Name;
	var databinding UniqueNetId Id;
	var databinding int Score;
	var databinding int Goals;
	var databinding int Assists;
	var databinding int Saves;
	var databinding int Shots;

	structdefaultproperties
	{
		Name=None
		
		Score=0
		Goals=0
		Assists=0
		Saves=0
		Shots=0
	}
};

struct TourMatchTeamDetails
{
	var Qword TeamID;
	var array<int> GoalsPerGame;
	var array<TourMatchPlayerStats> CumulativePlayerStats;

	structdefaultproperties
	{
		
		GoalsPerGame.Empty
		CumulativePlayerStats.Empty
	}
};

struct TourBracket
{
	var Qword TournamentID;
	var array<TourTeam> Teams;
	var array<TourMatch> Matches;
	var TourLeaderboard Leaderboard;
	var array<ShopCurrencyInfo> CurrentPayouts;

	structdefaultproperties
	{
		
		Teams.Empty
		Matches.Empty
		Leaderboard=(TeamGoals=None,PlayerGoals=None,PlayerAssists=None,PlayerSaves=None)
		CurrentPayouts.Empty
	}
};

struct TourServerSettings
{
	var Qword TournamentID;
	var int MatchID;
	var string GameTags;
	var int /** _Types_TA.EMatchTieBreaker*/ TieBreaker;
	var byte GameMode;
	var array<name> DisabledMaps;
	var name MapSetName;
	var int SeriesLength;
	var int TeamSize;
	var array<TourTeam> Teams;
	var array<Qword> BotTeams;
	var array<TourMatchGame> Games;
	var array<UniqueNetId> SpectatorPlayerIDs;
	var UniqueNetId CreatorPlayerID;
	var byte MinPlayersPerTeam;
	var Qword MatchExpireTimestamp;
	var int MinPlayersMetWaitTimeSeconds;

	structdefaultproperties
	{
		
		MatchID=-1
		GameTags=""
		TieBreaker=0
		GameMode=0
		DisabledMaps.Empty
		MapSetName=None
		SeriesLength=0
		TeamSize=0
		Teams.Empty
		BotTeams.Empty
		Games.Empty
		SpectatorPlayerIDs.Empty
		
		MinPlayersPerTeam=1
		
		MinPlayersMetWaitTimeSeconds=0
	}
};

struct TourPrivateCredentials
{
	var string Title;
	var string Password;

	structdefaultproperties
	{
		Title=""
		Password=""
	}
};

struct TourCreateSettings
{
	var TourSettings_TA Settings;
	var TourPrivateCredentials PrivateSettings;
	var array<TourReward> Rewards;

	structdefaultproperties
	{
		Settings=None
		PrivateSettings=(Title="",Password="")
		Rewards.Empty
	}
};

struct TourSearchSettings
{
	var string Text;
	var int RankMin;
	var int RankMax;
	var array<int> GameModes;
	var array<string> Regions;
	var int TeamSize;
	var int BracketSize;
	var bool bEnableCrossplay;
	var Qword StartTime;
	var Qword EndTime;
	var bool bShowFull;
	var bool bShowIneligibleRank;

	structdefaultproperties
	{
		Text=""
		RankMin=-1
		RankMax=-1
		GameModes.Empty
		Regions.Empty
		TeamSize=0
		BracketSize=0
		bEnableCrossplay=false
		
		
		bShowFull=false
		bShowIneligibleRank=false
	}
};

struct GFxTournamentReward
{
	var() databinding int Placement;
	var() databinding ProductInstanceID InstanceID;

	structdefaultproperties
	{
		Placement=0
		
	}
};

struct TournamentResult
{
	var databinding int Difficulty;
	var databinding int Placement;
	var databinding int Score;
	var databinding int ResultStanding;

	structdefaultproperties
	{
		Difficulty=0
		Placement=0
		Score=0
		ResultStanding=0
	}
};

struct TourResult
{
	var databinding Qword TournamentID;
	var databinding int Difficulty;
	var databinding int Placement;

	structdefaultproperties
	{
		
		Difficulty=0
		Placement=0
	}
};

struct TournamentEndData
{
	var Qword CycleID;
	var int WeekIndex;
	var array<TournamentResult> OldWeeklyResults;
	var TournamentResult Result;
	var array<ShopCurrencyInfo> CurrencyRewards;
	var array<ShopCurrencyInfo> OldWeeklyCurrencies;
	var array<ShopCurrencyInfo> WeeklyCurrencies;
	var array<ShopCurrencyInfo> FinalCurrencies;

	structdefaultproperties
	{
		
		WeekIndex=0
		OldWeeklyResults.Empty
		Result=(Difficulty=0,Placement=0,Score=0,ResultStanding=0)
		CurrencyRewards.Empty
		OldWeeklyCurrencies.Empty
		WeeklyCurrencies.Empty
		FinalCurrencies.Empty
	}
};

struct FaceItReservationMatchInfo
{
	var int PartnerID;
	var int ServerId;
	var bool bIsCrossPlatform;

	structdefaultproperties
	{
		PartnerID=0
		ServerId=0
		bIsCrossPlatform=false
	}
};

var const array<name> DisabledMutatorCategories;
var const array<name> DisabledMutatorSettings;

defaultproperties
{
	DisabledMutatorCategories(0)=BotDifficulty
	DisabledMutatorCategories(1)=OvertimeRules
	DisabledMutatorCategories(2)=MatchGames
	DisabledMutatorSettings(0)=UnlimitedTime
}