/*******************************************************************************
* FreeplayCommandsStatics_TA generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class FreeplayCommandsStatics_TA extends Object
	abstract;

struct CalculateBallInFrontLocationInParams
{
	var float BallRadius;
	var float BallInFrontDistance;
	var Rotator CarRotation;
	var Vector CarLocalCollisionExtent;
	var Vector CarLocation;

	structdefaultproperties
	{
		BallRadius=0.0
		BallInFrontDistance=0.0
		CarRotation=(Pitch=0,Yaw=0,Roll=0)
		CarLocalCollisionExtent=(X=0.0,Y=0.0,Z=0.0)
		CarLocation=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct CalculateBallOnCarLocationInParams
{
	var Rotator CarRotation;
	var Vector CarLocation;
	var Vector CarAcceleration;
	var float CarSpeedPerc;
	var float CarTurnPerc;
	var float BaseForwardOffset;
	var float BaseUpOffset;
	var float ForwardOffsetFromTurn;
	var float AccelerationEffectMultiplier;
	var float MaxRightOffset;
	var float SlowRightOffsetPerc;
	var float MinUpOffsetPerc;

	structdefaultproperties
	{
		CarRotation=(Pitch=0,Yaw=0,Roll=0)
		CarLocation=(X=0.0,Y=0.0,Z=0.0)
		CarAcceleration=(X=0.0,Y=0.0,Z=0.0)
		CarSpeedPerc=0.0
		CarTurnPerc=0.0
		BaseForwardOffset=0.0
		BaseUpOffset=0.0
		ForwardOffsetFromTurn=0.0
		AccelerationEffectMultiplier=0.0
		MaxRightOffset=0.0
		SlowRightOffsetPerc=0.0
		MinUpOffsetPerc=0.0
	}
};

struct CalculateBallOnCarInAirLocationInParams
{
	var float BallRadius;
	var float BallOnCarDistance;
	var float CarLocalCollisionZ;
	var Rotator CarRotation;
	var Vector CarLocation;
	var Vector CarCurrentLinearVelocity;

	structdefaultproperties
	{
		BallRadius=0.0
		BallOnCarDistance=0.0
		CarLocalCollisionZ=0.0
		CarRotation=(Pitch=0,Yaw=0,Roll=0)
		CarLocation=(X=0.0,Y=0.0,Z=0.0)
		CarCurrentLinearVelocity=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct CalculateRedirectHorizontalLaunchSpeedInParams
{
	var Vector BallLocation;
	var Vector CarLocation;
	var Vector CarVelocity;
	var float MaxHorizontalLaunchSpeed;
	var float SpeedDropoffMaxRange;

	structdefaultproperties
	{
		BallLocation=(X=0.0,Y=0.0,Z=0.0)
		CarLocation=(X=0.0,Y=0.0,Z=0.0)
		CarVelocity=(X=0.0,Y=0.0,Z=0.0)
		MaxHorizontalLaunchSpeed=0.0
		SpeedDropoffMaxRange=0.0
	}
};

struct CalculateRedirectPassLocationInParams
{
	var Vector BallStartLocation;
	var Vector CarStartLocation;
	var Vector CarStartVelocity;
	var Vector BestGoalLocation;
	var float VelocityWeight;
	var float VelocityZWeight;
	var float GoalWeight;
	var float BallHorizontalSpeed;
	var float MaxGoalLeading;
	var float AdditionalTargetHeight;
	var int Iterations;

	structdefaultproperties
	{
		BallStartLocation=(X=0.0,Y=0.0,Z=0.0)
		CarStartLocation=(X=0.0,Y=0.0,Z=0.0)
		CarStartVelocity=(X=0.0,Y=0.0,Z=0.0)
		BestGoalLocation=(X=0.0,Y=0.0,Z=0.0)
		VelocityWeight=0.0
		VelocityZWeight=0.0
		GoalWeight=0.0
		BallHorizontalSpeed=0.0
		MaxGoalLeading=0.0
		AdditionalTargetHeight=0.0
		Iterations=0
	}
};

struct GetTargetLocationFromFlightTimeInParams
{
	var Vector TargetStartLocation;
	var Vector TargetVelocity;
	var float FlightTime;
	var float VelocityWeight;
	var float VelocityZWeight;

	structdefaultproperties
	{
		TargetStartLocation=(X=0.0,Y=0.0,Z=0.0)
		TargetVelocity=(X=0.0,Y=0.0,Z=0.0)
		FlightTime=0.0
		VelocityWeight=0.0
		VelocityZWeight=0.0
	}
};

struct CalculateShotOnGoalLocationStandardInParams
{
	var float BallRadius;
	var float HorizontalGoalPosition;
	var float VerticalGoalPosition;
	var float GoalVolumeHalfWidth;
	var float GoalVolumeHalfHeight;
	var Vector GoalWorldFrontCenter;
	var Vector GoalForward;

	structdefaultproperties
	{
		BallRadius=0.0
		HorizontalGoalPosition=0.0
		VerticalGoalPosition=0.0
		GoalVolumeHalfWidth=0.0
		GoalVolumeHalfHeight=0.0
		GoalWorldFrontCenter=(X=0.0,Y=0.0,Z=0.0)
		GoalForward=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct CalculateShotOnGoalLocationHoopsInParams
{
	var float SurfaceHeight;
	var float GoalRadius;
	var float WidthPosition;
	var float LengthPosition;
	var Vector BackboardDirection;
	var Vector BackboardLocation;
	var Vector GoalCenter;

	structdefaultproperties
	{
		SurfaceHeight=0.0
		GoalRadius=0.0
		WidthPosition=0.0
		LengthPosition=0.0
		BackboardDirection=(X=0.0,Y=0.0,Z=0.0)
		BackboardLocation=(X=0.0,Y=0.0,Z=0.0)
		GoalCenter=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct CalculateShotOnGoalSpeedHoopsInParams
{
	var float MaxLaunchSpeed;
	var float DropoffRange;
	var float MinSpeedReductionAngle;
	var float AboveNetSpeedReduction;
	var Vector BallProximityToRim;

	structdefaultproperties
	{
		MaxLaunchSpeed=0.0
		DropoffRange=0.0
		MinSpeedReductionAngle=0.0
		AboveNetSpeedReduction=0.0
		BallProximityToRim=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct CalculateLaunchVectorInParams
{
	var Vector StartLocation;
	var Vector TargetLocation;
	var float Gravity;
	var float HorizontalSpeed;
	var float MaxVerticalLaunchSpeedRatio;

	structdefaultproperties
	{
		StartLocation=(X=0.0,Y=0.0,Z=0.0)
		TargetLocation=(X=0.0,Y=0.0,Z=0.0)
		Gravity=0.0
		HorizontalSpeed=0.0
		MaxVerticalLaunchSpeedRatio=0.0
	}
};

struct CalculateVerticalLaunchSpeedInParams
{
	var float TargetHeight;
	var float StartHeight;
	var float FlightTime;
	var float Gravity;

	structdefaultproperties
	{
		TargetHeight=0.0
		StartHeight=0.0
		FlightTime=0.0
		Gravity=0.0
	}
};

struct ModifyRBStateInParams
{
	var ReplicatedRBState InRBState;
	var Vector NewLocation;
	var Vector NewLinearVelocity;
	var Vector NewAngularVelocity;

	structdefaultproperties
	{
		InRBState=(Quaternion=(X=0.0,Y=0.0,Z=0.0,W=0.0),Location=(X=0.0,Y=0.0,Z=0.0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),Time=0.0,bSleeping=false,bNewData=false)
		NewLocation=(X=0.0,Y=0.0,Z=0.0)
		NewLinearVelocity=(X=0.0,Y=0.0,Z=0.0)
		NewAngularVelocity=(X=0.0,Y=0.0,Z=0.0)
	}
};
