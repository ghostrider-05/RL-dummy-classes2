/*******************************************************************************
* GFxData_Party_TA generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class GFxData_Party_TA extends GFxDataSingleton_X;

enum EPsyNetPartyStatus
{
	PsyNetParty_Disabled,
	PsyNetParty_Connecting,
	PsyNetParty_Connected,
	PsyNetParty_Disconnected,
	PsyNetParty_MAX
};

struct GFxPartyMember
{
	var databinding UniqueNetId PersonaId;
	var databinding string PlayerName;
	var databinding string ProfileId;
	var databinding Texture PlayerAvatarTexture;
	var databinding Qword ClubID;
	var databinding bool bSplitScreen;
	var databinding bool bLocalSplitScreen;
	var databinding bool bHasProfile;
	var databinding bool bPartyLeader;
	var databinding bool bIsPlayerTrading;
	var databinding bool bIsPlayerInMatch;
	var databinding bool bPlayerCanTrade;

	structdefaultproperties
	{
		
		PlayerName=""
		ProfileId=""
		PlayerAvatarTexture=none
		
		bSplitScreen=false
		bLocalSplitScreen=false
		bHasProfile=false
		bPartyLeader=false
		bIsPlayerTrading=false
		bIsPlayerInMatch=false
		bPlayerCanTrade=false
	}
};

var databinding array<GFxPartyMember> Members;
var databinding int MaxPartySize;
var databinding name Processing;
var transient OnlineGameParty_X OnlineParty;
var transient Personas_TA PersonasData;
var export editinline OnlineClubCache_X Clubs;
var VanitySetManager_TA VanityManager;
var databinding EPsyNetPartyStatus PsyNetPartyStatus;
var const localized string RegionRestrictedPlayerTrade;
var GFxModal_X PendingTradeInviteModal;
var GFxModal_X PartyErrorModal;
var bool bPendingAllowTrade;
var CrossplayConfig_X CrossplayConfig;

defaultproperties
{
	TableName=Party
	bLevelTransitionPersistent=true
}