/*******************************************************************************
* ProductAsset_Body_TA generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class ProductAsset_Body_TA extends ProductAsset_TA
	editinlinenew
	hidecategories(Object);

struct native VehicleWheelSettings
{
	var() name BoneName;

	structdefaultproperties
	{
		BoneName=None
	}
};

struct native VehicleAxleSettings
{
	var() float WheelMeshRadius;
	var() float WheelWidth;
	var() float WheelMeshOffsetSide;
	var() VehicleWheelSettings LeftWheel;
	var() VehicleWheelSettings RightWheel;
	var() editconst float WheelRadius;
	var() editconst float WheelOffsetForward;
	var() editconst float WheelOffsetSide;

	structdefaultproperties
	{
		WheelMeshRadius=15.0
		WheelWidth=15.0
		WheelMeshOffsetSide=0.0
		LeftWheel=(BoneName=None)
		RightWheel=(BoneName=None)
		WheelRadius=15.0
		WheelOffsetForward=0.0
		WheelOffsetSide=0.0
	}
};

struct native TeamPaintFinish
{
	var() ProductAsset_PaintFinish_TA TeamFinish;
	var() ProductAsset_PaintFinish_TA CustomFinish;

	structdefaultproperties
	{
		TeamFinish=none
		CustomFinish=none
	}
};

struct native BoostAttachmentToggle
{
	var() name BoostAttachment;
	var() array<FXActorEvent_X> AttachAny;
	var() array<FXActorEvent_X> DetachAny;

	structdefaultproperties
	{
		BoostAttachment=None
		AttachAny.Empty
		DetachAny.Empty
	}
};

/** Static mesh for vehicle body */
var(Mesh) SkeletalMesh Mesh;
/** Animation tree for frame/chassis */
var(Mesh) AnimTree AnimTreeTemplate;
var(Mesh) array<AnimSet> AnimSets;
/** Physics asset */
var(Physics) PhysicsAsset PhysicsAsset;
var(Physics) HandlingPreset_TA HandlingPreset;
var(Physics) float HandlingPresetZOffset;
/** Settings for front axle */
var(Wheels) VehicleAxleSettings FrontAxle;
/** Settings for rear axle */
var(Wheels) VehicleAxleSettings BackAxle;
var(Wheels) array<VehicleAxleSettings> AdditionalAxles;
var(Wheels) float SteerScale;
/** Spring settings for bouncy chassis */
var(Physics) SimpleSpringSettings ChassisSpring;
/** Overall scaler for bouncy chassis rotation */
var(Physics) duplicatetransient editconst float ChassisRotationScale;
/** Overall scaler for bouncy chassis translation */
var(Physics) duplicatetransient editconst float ChassisTranslationScale;
/** Max suspension travel for wheels */
var(Physics) float SuspensionTravelMax;
/** Min suspension travel for wheels */
var(Physics) float SuspensionTravelMin;
var bool bUseLegacySuspensionOffsets;
var(FX) bool bOverrideBoostFlapsAngle;
/** Engine and exhaust sounds */
var deprecated AkSoundCue EngineSound;
/** Engine and exhaust sounds */
var deprecated AkSoundCue ExhaustSound;
var deprecated AkSoundCue BlowoffSound;
var deprecated EngineAudioProfile_TA EngineAudioProfile;
var editoronly deprecated ProductAsset_EngineAudio_TA EngineAudioAsset;
var(Sound) editoronly array<editoronly ProductAsset_EngineAudio_TA> EngineAudioAssets;
var editconst deprecated int EngineAudioProductID;
var(Sound) editinline ProductAssetReference_TA EngineAudioReference;
/** FX actor specific to this body (ambient effects) */
var(FX) FXActor_X FXActor;
/** Material index for skin */
var(FX) int SkinMaterialIndex;
/** Material index for brakelights */
var(FX) int BrakelightMaterialIndex;
/** Material index for chassis */
var(FX) int ChassisMaterialIndex;
var(FX) int BoostMaterialIndex;
/** Override sockets to spawn boost emitters from. If not specified, will kep the one emitter at RocketBoost socket */
var(FX) array<name> BoostEmitterSockets;
/** How far the boost flaps turn (degrees) */
var(FX) float BoostFlapsAngle;
var() LinearColor ForcedTeamColors[2];
/** Force player to use this custom color when using this body */
var() LinearColor ForcedCustomColor;
var() Vector SupersonicTrailOffset;
var() array<Product_TA> AdditionalUnlocks2;
var() export editinline ProductEquipProfile_TA EquipProfile;
/** Additional persistent attachments */
var() array<ProductAttachment> Attachments;
/** Paramaters to set on the boost particles */
var(FX) array<ParticleSysParam> BoostParticleParameters;
/** Particle for supersonic wheel fx */
var(FX) ParticleSystem SupersonicWheelTemplate;
/** FX Actor for demolish explosion */
var(FX) FXActor_X DemolishFX;
/** FX Actor for spawning */
var(FX) FXActor_X SpawnFX;
var(FX) FXActor_X ExitFX;
var(FX) float WheelPreviewAnimTranslateScale;
var(FX) array<BoostAttachmentToggle> BoostAttachmentsToModify;
var() MaterialParams SkinParameters;
var(Thumbnail) editinline ProductAssetReferenceWheel_TA ThumbnailWheelAsset;
var array<SkeletalMeshLODDistanceInfo> LODDistanceInfo;
var() array<Object> MutatorArchetypes;

defaultproperties
{
	FrontAxle=(WheelMeshRadius=15.0,WheelWidth=15.0,WheelMeshOffsetSide=0.0,LeftWheel=(BoneName=FL_Disc_jnt),RightWheel=(BoneName=FR_Disc_jnt),WheelRadius=15.0,WheelOffsetForward=0.0,WheelOffsetSide=0.0)
	BackAxle=(WheelMeshRadius=15.0,WheelWidth=15.0,WheelMeshOffsetSide=0.0,LeftWheel=(BoneName=BL_Disc_jnt),RightWheel=(BoneName=BR_Disc_jnt),WheelRadius=15.0,WheelOffsetForward=0.0,WheelOffsetSide=0.0)
	SteerScale=1.0
	ChassisSpring=(Strength=(X=100.0,Y=100.0,Z=100.0),Damping=(X=5.0,Y=5.0,Z=5.0),MaxDisplacement=(X=50.0,Y=50.0,Z=50.0),bUseMinDisplacement=false,MinDisplacement=(X=0.0,Y=0.0,Z=0.0),Mass=1.0,MassOffset=(X=0.0,Y=0.0,Z=0.0),MaxSpeed=3000.0,bDebug=false,DrawDebugOffset=0.0)
	ChassisRotationScale=25.0
	ChassisTranslationScale=0.10
	SuspensionTravelMax=8.0
	bOverrideBoostFlapsAngle=true
	BoostMaterialIndex=-1
	BoostFlapsAngle=-45.0
	ForcedTeamColors[0]=(R=0.0,G=0.0,B=0.0,A=1.0)
	ForcedTeamColors[1]=(R=0.0,G=0.0,B=0.0,A=1.0)
	ForcedCustomColor=(R=0.0,G=0.0,B=0.0,A=1.0)
	EquipProfile=ProductEquipProfile_TA'Default__ProductAsset_Body_TA.DefaultEquipProfile'
	WheelPreviewAnimTranslateScale=1.0
	LODDistanceInfo(0)=(DisplayFactor=0.0,LODHysteresis=0.020)
	LODDistanceInfo(1)=(DisplayFactor=0.150,LODHysteresis=0.020)
	LODDistanceInfo(2)=(DisplayFactor=0.0350,LODHysteresis=0.020)
	ThumbnailKeyLightBrightnessScale=0.60
}