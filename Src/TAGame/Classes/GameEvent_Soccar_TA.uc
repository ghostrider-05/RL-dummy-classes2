/*******************************************************************************
* GameEvent_Soccar_TA generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class GameEvent_Soccar_TA extends GameEvent_Team_TA
	collapsecategories
	notplaceable
	hidecategories(Navigation,Actor,Object);

struct MemberTitleStat
{
	var StatCategory_TA Category;
	var StatTitle_TA Title;
	var int PointsEarned;
	var int StatCount;
	var PRI_TA MemberPRI;

	structdefaultproperties
	{
		Category=None
		Title=None
		PointsEarned=0
		StatCount=0
		MemberPRI=None
	}
};

// For comparing different car settings
var() Car_TA TestCarArchetype;
// Ball to spawn for this level
var(Setup) Ball_TA BallArchetype;
var GoalIndicator_TA GoalIndicatorArchetype;
// Where to spawn the ball. If not set will spawn the ball at center
var(Setup) Actor BallSpawnPoint;
// Handles giving XP to players
var() StatFactory_TA StatFactoryArchetype;
// Initial State Game Event goes to OnInit
var() name InitialEventState;
var() int SeriesLength;
// How long a game is
var() int GameTime;
//  Min time to do warmup camera
var() int WarmupTime;
// A team wins if they reach this score
var() int MaxScore;
var() int AutoBalanceDifference;
var() export editinline OvertimeComponent_TA OvertimeComponent;
// Slomo when goal scored
var() InterpCurveFloat ScoreSlomoCurve;
var transient float ScoreSlomoTime;
var transient float GameTimeRemaining;
var repnotify transient int SecondsRemaining;
var transient int WaitTimeRemaining;
var transient float TotalGameTimePlayed;
var transient float OvertimeTimePlayed;
var Message_TA GoalScoredMessage;
var Message_TA OvertimeMessage;
var Message_TA TwoMinRemainingMessage;
var Message_TA OneMinRemainingMessage;
var Message_TA ThirtySecondsRemainingMessage;
var Message_TA StopMessage;
var Message_TA GamePausedMessage;
var Message_TA GameUnPausedMessage;
var Message_TA OutOfBoundsMessage;
var transient bool bRoundActive;
var() bool bPlayReplays;
var repnotify transient bool bBallHasBeenHit;
var repnotify transient bool bOverTime;
var bool bUnlimitedTime;
var transient bool bNoContest;
var transient bool bDisableGoalDelay;
var const bool bShowNoScorerGoalMessage;
var repnotify transient bool bMatchEnded;
var bool bShowIntroScene;
var repnotify bool bClubMatch;
var bool bCanDropOnlineRewards;
var repnotify transient bool bAllowHonorDuels;
var transient int NextSpawnIndex;
// handles replay recording and playback
var() ReplayDirector_TA ReplayDirectorArchetype;
var repnotify transient ReplayDirector_TA ReplayDirector;
var transient array<Ball_TA> GameBalls;
var() int TotalGameBalls;
// Delay between goal score and replay/round restart
var() float PostGoalTime;
var transient StatFactory_TA StatFactory;
var export editinline transient array<export editinline Goal_TA> Goals;
// When to start doing second-by-second countdown before the game is over
var() int SecondsRemainingCountdown;
var() Message_TA SecondsRemainingMessage;
var transient Vector FieldCenter;
var repnotify transient Team_TA GameWinner;
var repnotify transient Team_TA MatchWinner;
var transient ETieBreakDecision TieBreakDecision;
var repnotify transient byte ReplicatedScoredOnTeam;
var EConnectionQualityState ReplicatedServerPerformanceState;
var transient PRI_TA MVP;
var transient PRI_TA FastestGoalPlayer;
var transient PRI_TA SlowestGoalPlayer;
var transient PRI_TA FurthestGoalPlayer;
var transient float FastestGoalSpeed;
var transient float SlowestGoalSpeed;
var transient float FurthestGoal;
var transient PRI_TA ScoringPlayer;
var transient int RoundNum;
// Only give assists if assisted within this amount of time
var() float AssistMaxTime;
var float BallHasBeenHitStartDelay;
var transient float BallRespawnTime;
var() GameEvent_Soccar_SubRules_TA DefaultSubRules;
var repnotify transient GameEvent_Soccar_SubRules_TA SubRulesArchetype;
var transient GameEvent_Soccar_SubRules_TA SubRules;
var SpawnPointCluster_TA SpawnPointsPodiumAnim;
var SpawnPointCluster_TA SpawnPointsPodium;
var float PodiumDelay;
var float PodiumTime;
var array<SpawnPointCluster_TA> SpawnPointLobbyTeams;
var array<StatCategory_TA> StatCategories;
var Ball_Trajectory_TA BallTrajectory;
var Ball_Trajectory_TA BallTrajectoryArchetype;
var transient CountdownObject_TA UnpauseCountdown;
var transient PlayerController_TA Pauser;
var transient array<OnlinePlayerMatchData> PlayerMatchData;
var() export editinline EndRoundComponent_TA EndRoundComponentArchetype;
var export editinline EndRoundComponent_TA EndRoundComponent;
var export editinline MatchBroadcastComponent_TA MatchBroadcast;
var repnotify transient StatEvent_TA ReplicatedStatEvent;
var() array<StatEvent_TA> ImportantStatEvents;
var() export editinline GameObserver_TA GameObserver;
var() export editinline FpsBucketRecorder_TA ActiveFpsRecorder;
var() export editinline FpsBucketRecorder_TA InactiveFpsRecorder;
var() export editinline ServerPerformanceTracker_TA ServerPerformanceTracker;
var() MatchSeries_TA MatchSeries;
var() export editinline CrowdSoundManagerBase_TA CrowdSound;
var const float LobbyTagOffsetZ;
var const float PodiumTagOffsetZ;
var const float BallSpacing;
var const float PreMatchPlayersReadyStartDelay;
var transient array<PRI_TA> RemovedPRIs;

defaultproperties
{
	SeriesLength=1
	bShowNoScorerGoalMessage=true
	TotalGameBalls=1
	ReplicatedScoredOnTeam=255
	SlowestGoalSpeed=-1.0
	BallHasBeenHitStartDelay=5.0
	
	
	LobbyTagOffsetZ=100.0
	PodiumTagOffsetZ=-20.0
	BallSpacing=50.0
	PreMatchPlayersReadyStartDelay=5.0
	
	bMultiplayer=true
	
	
	
	
	
	
	
}
replication
{
	 if(bNetInitial)
		MaxScore, SeriesLength, 
		bClubMatch, bUnlimitedTime;

	 if(bNetDirty)
		GameTime, GameWinner, 
		MVP, MatchWinner, 
		ReplayDirector, ReplicatedScoredOnTeam, 
		ReplicatedStatEvent, RoundNum, 
		SecondsRemaining, SubRulesArchetype, 
		TieBreakDecision, WaitTimeRemaining, 
		bAllowHonorDuels, bBallHasBeenHit, 
		bCanDropOnlineRewards, bMatchEnded, 
		bNoContest, bOverTime, 
		bShowIntroScene;

	 if(bNetInitial/**Empty key for position: 20.*/)
		ReplicatedServerPerformanceState;
}
