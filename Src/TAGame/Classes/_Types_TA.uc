/*******************************************************************************
* _Types_TA generated by MVN.RLLib using AssetExtraction.
* MVN.RLLib Â© 2019 Martin VN. All rights reserved.
* All rights belong to their respective owners.
*******************************************************************************/
class _Types_TA extends Object
	abstract;

enum EAchievementType
{
	AT_Game,
	AT_EXP0,
	AT_DLC0,
	AT_DLC1,
	AT_DLC2,
	AT_XBO0,
	AT_DLC3,
	AT_DLC4,
	AT_DLC5,
	AT_DLC6,
	AT_DLC7,
	AT_Meta,
	AT_MAX
};

enum EInputBufferSaturationLevel
{
	IBSL_ExtremelyStarved,
	IBSL_Starved,
	IBSL_Good,
	IBSL_Saturated,
	IBSL_ExtremelySaturated,
	IBSL_MAX
};

enum EStatGraphLevel
{
	StatGraphLevel_None,
	StatGraphLevel_PerfSummary,
	StatGraphLevel_PerfGraphShort,
	StatGraphLevel_PerfGraphLong,
	StatGraphLevel_NetSummary,
	StatGraphLevel_NetGraphShort,
	StatGraphLevel_NetGraphLong,
	StatGraphLevel_MAX
};

enum EMeshMirrorMode
{
	MeshMirrorMode_Mirror,
	MeshMirrorMode_Rotate,
	MeshMirrorMode_MAX
};

enum ENetworkValue
{
	Net_Low,
	Net_Medium,
	Net_High,
	Net_MAX
};

enum ENetworkInputBuffer
{
	NetworkInputBuffer_ServerConsume,
	NetworkInputBuffer_STS,
	NetworkInputBuffer_CSTS,
	NetworkInputBuffer_MAX
};

enum EVoteSubject
{
	VoteSubject_Rematch,
	VoteSubject_Forfeit,
	VoteSubject_MAX
};

enum EWheelPosition
{
	WP_FrontLeft,
	WP_FrontRight,
	WP_BackLeft,
	WP_BackRight,
	WP_MAX
};

enum EMatchmakingViewTab
{
	MatchmakingViewTab_Unranked,
	MatchmakingViewTab_Ranked,
	MatchmakingViewTab_RankedSports,
	MatchmakingViewTab_UnrankedSports,
	MatchmakingViewTab_MicroEvent,
	MatchmakingViewTab_DebugMicroEvent,
	MatchmakingViewTab_Casual,
	MatchmakingViewTab_MAX
};

enum SearchStatusOwner
{
	StatusOwner_None,
	StatusOwner_Matchmaking,
	StatusOwner_PrivateMatch,
	StatusOwner_Tournaments,
	StatusOwner_MAX
};

enum ESettingsAutoUpdateReason
{
	SAUR_PartyJoin,
	SAUR_PartyLeave,
	SAUR_SplitScreenJoin,
	SAUR_SplitScreenLeave,
	SAUR_GenericUpdate,
	SAUR_MAX
};

enum ETeam
{
	Team_Blue,
	Team_Orange,
	Team_MAX
};

enum EPaintTeam
{
	PaintTeam_Blue,
	PaintTeam_Orange,
	PaintTeam_None,
	PaintTeam_MAX
};

enum ESupportType
{
	SupportType_Creator,
	SupportType_Charity,
	SupportType_MAX
};

enum EVoiceFilter
{
	VoiceFilter_All,
	VoiceFilter_Preset,
	VoiceFilter_TeamPreset,
	VoiceFilter_TacticalPreset,
	VoiceFilter_Team,
	VoiceFilter_Friends,
	VoiceFilter_None,
	VoiceFilter_MAX
};

enum EChatFilter
{
	ChatFilter_All,
	ChatFilter_Team,
	ChatFilter_Friends,
	ChatFilter_Preset,
	ChatFilter_TeamPreset,
	ChatFilter_TacticalPreset,
	ChatFilter_None,
	ChatFilter_MAX
};

enum EControllerSoundMode
{
	CSM_Multiplayer,
	CSM_On,
	CSM_Off,
	CSM_MAX
};

enum EEffectsIntensity
{
	EI_Default,
	EI_Low,
	EI_MAX
};

enum ELicenseGroup
{
	LicenseGroup_Default,
	LicenseGroup_Mario,
	LicenseGroup_Berry,
	LicenseGroup_Maple,
	LicenseGroup_DC,
	LicenseGroup_FastNFurious,
	LicenseGroup_Dodge,
	LicenseGroup_Nissan,
	LicenseGroup_RickNMorty,
	LicenseGroup_HotWheels,
	LicenseGroup_WWE,
	LicenseGroup_Jurassic,
	LicenseGroup_Microsoft,
	LicenseGroup_Nintendo,
	LicenseGroup_Sony,
	LicenseGroup_Back2Future,
	LicenseGroup_Ghostbusters,
	LicenseGroup_Stranger,
	LicenseGroup_Fortnite,
	LicenseGroup_McLaren,
	LicenseGroup_KnightRider,
	LicenseGroup_Pele,
	LicenseGroup_MLB,
	LicenseGroup_NFL,
	LicenseGroup_NBA,
	LicenseGroup_Community,
	LicenseGroup_Esports,
	LicenseGroup_ESPN,
	LicenseGroup_Monstercat,
	LicenseGroup_Kaskade,
	LicenseGroup_Ford,
	LicenseGroup_Misc,
	LicenseGroup_Lambo,
	LicenseGroup_Nascar,
	LicenseGroup_F1,
	LicenseGroup_Bond,
	LicenseGroup_BMW,
	LicenseGroup_Grimes,
	LicenseGroup_Ferrari,
	LicenseGroup_Honda,
	LicenseGroup_Bugatti,
	LicenseGroup_MAX
};

enum EUnlockMethod
{
	UnlockMethod_Default,
	UnlockMethod_Online,
	UnlockMethod_DLC,
	UnlockMethod_Never,
	UnlockMethod_MAX
};

enum EProductQuality
{
	EPQ_Common,
	EPQ_Uncommon,
	EPQ_Rare,
	EPQ_VeryRare,
	EPQ_Import,
	EPQ_Exotic,
	EPQ_BlackMarket,
	EPQ_Premium,
	EPQ_Limited,
	EPQ_Legacy,
	EPQ_MAX
};

enum EProductFilterSortType
{
	ProductFilterSortType_Alphabetical,
	ProductFilterSortType_UnlockDate,
	ProductFilterSortType_Quality,
	ProductFilterSortType_Quantity,
	ProductFilterSortType_Series,
	ProductFilterSortType_MAX
};

enum EProductTradeRestriction
{
	ProductTradeRestriction_P2P,
	ProductTradeRestriction_TradeIn,
	ProductTradeRestriction_MAX
};

enum EEquippableProductSlot
{
	EPS_Skin,
	EPS_Wheels,
	EPS_Boost,
	EPS_Hat,
	EPS_Antenna,
	EPS_MAX
};

enum EXPTier
{
	XPTier_Low,
	XPTier_Medium,
	XPTier_High,
	XPTier_VeryHigh,
	XPTier_MAX
};

enum EVanityType
{
	VT_None,
	VT_Banner,
	VT_Avatar,
	VT_AvatarBorder,
	VT_MAX
};

enum EOnlineXPModifierType
{
	OnlineXPModifier_Additive,
	OnlineXPModifier_Multiplicative,
	OnlineXPModifier_MAX
};

enum ELegacyBoxStatus
{
	LBS_ExistingBox,
	LBS_NewBox,
	LBS_New,
	LBS_MAX
};

enum ECurrency
{
	Currency_Soft,
	Currency_Hard,
	Currency_MAX
};

enum EProductFilterLogLevel
{
	ProductFilterLogLevel_Filtered,
	ProductFilterLogLevel_UnFiltered,
	ProductFilterLogLevel_MAX
};

enum EArchiveProductFilter
{
	ArchiveFilter_ExcludeArchivedProducts,
	ArchiveFilter_IncludeArchivedProducts,
	ArchiveFilter_OnlyShowArchivedProducts,
	ArchiveFilter_MAX
};

enum EBlueprintType
{
	BlueprintType_Unrevealed,
	BlueprintType_Revealed,
	BlueprintType_NotABlueprint,
	BlueprintType_MAX
};

enum EDemolishTarget
{
	DemolishTarget_OtherTeam,
	DemolishTarget_Everyone,
	DemolishTarget_None,
	DemolishTarget_MAX
};

enum EDemolishSpeed
{
	DemolishSpeed_Supersonic,
	DemolishSpeed_None,
	DemolishSpeed_MAX
};

enum ECarImpactResult
{
	CarImpactResult_None,
	CarImpactResult_ZeroSpeed,
	CarImpactResult_ZeroSpeedTowardsCar,
	CarImpactResult_OtherCarFaster,
	CarImpactResult_Success,
	CarImpactResult_FailDemolishTargetNone,
	CarImpactResult_FailNotSupersonic,
	CarImpactResult_FailInsufficientForwardSpeed,
	CarImpactResult_FailNotWithinForwardEllipticalCone,
	CarImpactResult_FailSameTeam,
	CarImpactResult_FailNotWithinVictimHitLocationAngle,
	CarImpactResult_FailNotWithinForwardHitAngle,
	CarImpactResult_FailNotWithinImpactNormalAngle,
	CarImpactResult_Bump,
	CarImpactResult_MAX
};

enum EShowOnly
{
	SHOW_Everything,
	SHOW_Body,
	SHOW_Wheels,
	SHOW_Arena,
	SHOW_MAX
};

enum ETrainingType
{
	Training_None,
	Training_Aerial,
	Training_Goalie,
	Training_Striker,
	Training_MAX
};

enum EDifficulty
{
	D_Easy,
	D_Medium,
	D_Hard,
	D_MAX
};

enum ETrainingTag
{
	Tag_Aerials,
	Tag_Bounces,
	Tag_Shots,
	Tag_Saves,
	Tag_Clears,
	Tag_Rebounds,
	Tag_Redirects,
	Tag_Freestyles,
	Tag_Dribbles,
	Tag_AirDribbles,
	Tag_Kickoffs,
	Tag_WallShots,
	Tag_LongShots,
	Tag_CloseShots,
	Tag_AngleShots,
	Tag_BackwardsShots,
	Tag_Offense,
	Tag_Defense,
	Tag_PinchShots,
	Tag_MAX
};

enum EStatEventDisplayLevels
{
	SEDL_None,
	SEDL_Primary,
	SEDL_All,
	SEDL_MAX
};

enum EVoteStatus
{
	VOTE_Pending,
	VOTE_Yes,
	VOTE_No,
	VOTE_MAX
};

enum EBallHitType
{
	HitType_Item0,
	HitType_Item1,
	HitType_Item2,
	HitType_Car,
	HitType_MAX
};

enum ETAStatType
{
	StatType_Private,
	StatType_Unranked,
	StatType_Ranked,
	StatType_MAX
};

enum EProductAttachmentSocket
{
	PAS_Hat,
	PAS_Front,
	PAS_Antenna,
	PAS_UnderGlow,
	PAS_Root,
	PAS_MAX
};

enum EMirrorFieldType
{
	MFT_None,
	MFT_X,
	MFT_Y,
	MFT_XY,
	MFT_TeamIndex,
	MFT_MAX
};

enum EUIMenuState
{
	UIMS_StartMenu,
	UIMS_MainMenu,
	UIMS_MAX
};

enum EChatChannel
{
	EChatChannel_Match,
	EChatChannel_Team,
	EChatChannel_Party,
	EChatChannel_Individual,
	EChatChannel_MAX
};

enum EChatMessageType
{
	CMT_Default,
	CMT_Warning,
	CMT_VoiceNotification,
	CMT_MAX
};

enum ESkinType
{
	EST_Default,
	EST_Animated,
	EST_AnimatedPrimaryOnly,
	EST_NonAnimatedPrimaryOnly,
	EST_MAX
};

enum EProductThumbnailSize
{
	PTS_Garage,
	PTS_Drop,
	PTS_Preview,
	PTS_ShopItem,
	PTS_MAX
};

enum EBoostFillType
{
	BoostFill_Unlimited,
	BoostFill_Standard,
	BoostFill_Auto,
	BoostFill_NoBoost,
	BoostFill_MAX
};

enum EControlsVisibilityType
{
	ControlsVisibility_Visible,
	ControlsVisibility_Hidden,
	ControlsVisibility_FadeOut,
	ControlsVisibility_MAX
};

enum ESaveGameResult
{
	SaveGameResult_Pending,
	SaveGameResult_Success,
	SaveGameResult_UserNotSignedIn,
	SaveGameResult_Error,
	SaveGameResult_NoSpace,
	SaveGameResult_Corrupt,
	SaveGameResult_MAX
};

enum ETrainingSaveType
{
	ETS_MyTraining,
	ETS_Favorited,
	ETS_Downloaded,
	ETS_MAX
};

enum EPawnType
{
	PT_Player,
	PT_Spectator,
	PT_Editor,
	PT_MAX
};

enum EHistoryType
{
	HT_None,
	HT_Undo,
	HT_Redo,
	HT_MAX
};

enum EHistory
{
	H_None,
	H_Add,
	H_Remove,
	H_MAX
};

enum EEquipAction
{
	EquipAction_Both,
	EquipAction_Team0,
	EquipAction_Team1,
	EquipAction_MAX
};

enum EEditingType
{
	ET_FreeCam,
	ET_Ball,
	ET_Car,
	ET_MAX
};

enum ECustomMatchSettingsType
{
	CustomMatchSettingsType_PrivateMatch,
	CustomMatchSettingsType_LocalMatch,
	CustomMatchSettingsType_TourCreate,
	CustomMatchSettingsType_MAX
};

enum EPaintColorVariant
{
	PaintColorVariant_Primary,
	PaintColorVariant_LightAccent,
	PaintColorVariant_DarkAccent,
	PaintColorVariant_Emissive,
	PaintColorVariant_DeEmissive,
	PaintColorVariant_Complementary,
	PaintColorVariant_Balanced,
	PaintColorVariant_Tertiary,
	PaintColorVariant_Additive,
	PaintColorVariant_Unused3,
	PaintColorVariant_Unused4,
	PaintColorVariant_Unused5,
	PaintColorVariant_MAX
};

enum EPaintFinishType
{
	PaintFinishType_Standard,
	PaintFinishType_Metallic,
	PaintFinishType_MAX
};

enum EMTXCatalogCategory
{
	MTX_None,
	MTX_Keys,
	MTX_EsportsTokens,
	MTX_RocketBucks,
	MTX_StarterPack,
	MTX_StandardPack,
	MTX_MAX
};

enum ECameraSettingsPreset
{
	CameraSettingsPreset_Default,
	CameraSettingsPreset_Balanced,
	CameraSettingsPreset_Wide,
	CameraSettingsPreset_Custom,
	CameraSettingsPreset_Legacy,
	CameraSettingsPreset_MAX
};

enum EForceFeedbackType
{
	ForceFeedbackType_Disabled,
	ForceFeedbackType_VeryLight,
	ForceFeedbackType_Light,
	ForceFeedbackType_Medium,
	ForceFeedbackType_Heavy,
	ForceFeedbackType_Legacy,
	ForceFeedbackType_MAX
};

enum EForceFeedbackMode
{
	ForceFeedbackMode_Disabled,
	ForceFeedbackMode_Impact,
	ForceFeedbackMode_All,
	ForceFeedbackMode_MAX
};

enum EHUDMessageLevel
{
	HUDMessageLevel_All,
	HUDMessageLevel_GameUpdates,
	HUDMessageLevel_Essential,
	HUDMessageLevel_MAX
};

enum ENameplateMode
{
	NameplateMode_DistanceFade,
	NameplateMode_AlwaysVisible,
	NameplateMode_Simplified,
	NameplateMode_MAX
};

enum EMusicStingersSetting
{
	MusicStingers_Off,
	MusicStingers_MatchesOnly,
	MusicStingers_AlwaysOn,
	MusicStingers_MAX
};

enum EMatchTieBreaker
{
	MatchTieBreaker_FirstScore,
	MatchTieBreaker_Random,
	MatchTieBreaker_MAX
};

enum EPresenceGroup
{
	EPG_Offline,
	EPG_Online,
	EPG_InGame,
	EPG_Friends,
	EPG_MAX
};

enum EPersonaInfoOrigin
{
	PersonaOrigin_Platform,
	PersonaOrigin_PsyNet,
	PersonaOrigin_Epic,
	PersonaOrigin_MAX
};

enum EMainMenuBackground
{
	MMBG_Default,
	MMBG_UtopiaSnow,
	MMBG_HauntedStation,
	MMBG_Beach,
	MMBG_Beach_Night,
	MMBG_Halloween,
	MMBG_China,
	MMBG_ParkDay,
	MMBG_Music,
	MMBG_ThrowbackHockey,
	MMBG_Circuit,
	MMBG_Outlaw,
	MMBG_Arc,
	MMBG_ParkSnowy,
	MMBG_TokyoToon,
	MMBG_UtopiaLux,
	MMBG_Street,
	MMBG_FireAndIce,
	MMBG_MAX
};

enum ETieBreakDecision
{
	TBD_None,
	TBD_Goals,
	TBD_Shots,
	TBD_CoinToss,
	TBD_MAX
};

enum EPlaylistPopulationBucket
{
	PPB_Empty,
	PPB_Average,
	PPB_High,
	PPB_Extreme,
	PPB_MAX
};

enum EVoiceRoomType
{
	VRT_Invalid,
	VRT_Match,
	VRT_Party,
	VRT_MAX
};

enum EActiveVoiceLocation
{
	AVL_MainMenu,
	AVL_LoadingScreen,
	AVL_OfflineMatch,
	AVL_OnlineMatch,
	AVL_MAX
};

enum EVoiceInputMode
{
	VIM_OpenMic,
	VIM_PushToTalk,
	VIM_ToggleMute,
	VIM_MAX
};

struct native PlayerActorIDPair
{
	var int ActorID;
	var UniqueNetId PlayerID;

	structdefaultproperties
	{
		ActorID=0
		
	}
};

struct native PaintWithOverride
{
	var() ProductPaint_TA PaintToOverride;
	var() editinline array<editinline ProductOverride_TA> Overrides;

	structdefaultproperties
	{
		PaintToOverride=none
		Overrides.Empty
	}
};

struct native PersonaDataId
{
	var databinding UniqueNetId PersonaId;

	structdefaultproperties
	{
		
	}
};

struct native WaveParams
{
	var() float Frequency;
	var() float Amplitude;

	structdefaultproperties
	{
		Frequency=0.0
		Amplitude=0.0
	}
};

struct native StickyForceData
{
	var() float Ground;
	var() float Wall;

	structdefaultproperties
	{
		Ground=0.0
		Wall=0.0
	}
};

struct native AutoFlipData
{
	var() float Torque;
	var() float Force;

	structdefaultproperties
	{
		Torque=0.0
		Force=0.0
	}
};

struct PartyUpMergeError
{
	var UniqueNetId PlayerID;
	var UniqueNetId LeaderID;
	var Error Error;

	structdefaultproperties
	{
		
		
		Error=none
	}
};

struct native BodyToEngineAudioPair
{
	var Product_TA Body;
	var Product_TA EngineAudio;

	structdefaultproperties
	{
		Body=none
		EngineAudio=none
	}
};

struct FPSBucketMetrics
{
	var() int FPS;
	var() int FrameCount;
	var() float PercentTime;
	var() float AverageGameThreadTime;
	var() float AverageRenderThreadTime;
	var() float AverageGPUFrameTime;
	var() float UndockedAverageResolutionIndex;
	var() float DockedAverageResolutionIndex;

	structdefaultproperties
	{
		FPS=0
		FrameCount=0
		PercentTime=0.0
		AverageGameThreadTime=0.0
		AverageRenderThreadTime=0.0
		AverageGPUFrameTime=0.0
		UndockedAverageResolutionIndex=0.0
		DockedAverageResolutionIndex=0.0
	}
};

struct native PlaylistMapPrefs extends _Types_X.MapPrefs
{
	var name Playlist;
	var bool bOverrideGlobal;
};

struct native MapGroup
{
	var() array<MapData_TA> Maps;

	structdefaultproperties
	{
		Maps.Empty
	}
};

struct GFxTeamColor
{
	var databinding Color Value;
	var databinding int ColorID;
	var databinding int X;
	var databinding int Y;

	structdefaultproperties
	{
		Value=(R=0,G=0,B=0,A=0)
		ColorID=0
		X=0
		Y=0
	}
};

struct UISavedKeyValue
{
	var name Key;
	var string Value;

	structdefaultproperties
	{
		Key=None
		Value=""
	}
};

struct native DemolishData
{
	var RBActor_TA Attacker;
	var Car_TA Victim;
	var Vector AttackerVelocity;
	var Vector VictimVelocity;

	structdefaultproperties
	{
		Attacker=none
		Victim=none
		AttackerVelocity=(X=0.0,Y=0.0,Z=0.0)
		VictimVelocity=(X=0.0,Y=0.0,Z=0.0)
	}
};

struct native DemolishData2 extends _Types_TA.DemolishData
{
	var FXActor_X CustomDemoFX;
};

struct native DemolishDataGoalExplosion extends _Types_TA.DemolishData
{
	var PRI_TA GoalExplosionOwner;
};

struct ProductStat
{
	var int ProductID;
	var int Value;

	structdefaultproperties
	{
		ProductID=0
		Value=0
	}
};

struct XPInfo
{
	var int TotalXP;
	var int XpLevel;
	var string XPTitle;
	var int XPProgressInCurrentLevel;
	var int XPRequiredForNextLevel;

	structdefaultproperties
	{
		TotalXP=0
		XpLevel=0
		XPTitle=""
		XPProgressInCurrentLevel=0
		XPRequiredForNextLevel=0
	}
};

struct native ProfileCameraSettings
{
	var float FOV;
	var float Height;
	var float Pitch;
	var float Distance;
	var float Stiffness;
	var float SwivelSpeed;
	var float TransitionSpeed;

	structdefaultproperties
	{
		FOV=90.0
		Height=100.0
		Pitch=-3.0
		Distance=270.0
		Stiffness=0.50
		SwivelSpeed=2.50
		TransitionSpeed=1.0
	}
};

struct ProfileAutoCamSettings
{
	var float FOV;
	var float Height;
	var float Distance;
	var float MoveSpeed;
	var float MoveSpeedZ;
	var float RotateSpeed;
	var float AerialDistance;
	var float FocusBlendSpeed;
	var float AerialPrediction;
	var bool bUseReplayCamera;
	var bool bFocusOnGoals;

	structdefaultproperties
	{
		FOV=90.0
		Height=250.0
		Distance=1200.0
		MoveSpeed=2.0
		MoveSpeedZ=0.50
		RotateSpeed=3.0
		AerialDistance=300.0
		FocusBlendSpeed=15.0
		AerialPrediction=0.10
		bUseReplayCamera=true
		bFocusOnGoals=true
	}
};

struct native ReplayHeaderLoadResult
{
	var Replay_TA Header;
	var Error Error;

	structdefaultproperties
	{
		Header=none
		Error=none
	}
};

struct SeasonTeamRank
{
	var databinding int Team;
	var databinding int Wins;
	var databinding int Losses;
	var databinding int PointsFor;
	var databinding int PointsAgainst;
	var databinding int PointsDifferential;
	var databinding int EliminationWeek;

	structdefaultproperties
	{
		Team=0
		Wins=0
		Losses=0
		PointsFor=0
		PointsAgainst=0
		PointsDifferential=0
		EliminationWeek=0
	}
};

struct SeasonPlayer
{
	var databinding int Team;
	var databinding string Name;
	var databinding string Id;
	var databinding bool bBot;

	structdefaultproperties
	{
		Team=0
		Name=""
		Id=""
		bBot=false
	}
};

struct SeasonPlayerStat
{
	var databinding int PlayerIndex;
	var databinding string StatName;
	var databinding int StatValue;

	structdefaultproperties
	{
		PlayerIndex=0
		StatName=""
		StatValue=0
	}
};

struct SeasonTeam
{
	var databinding string Name;
	var databinding name LogoAsset;
	var databinding int EliminationWeek;

	structdefaultproperties
	{
		Name=""
		LogoAsset=None
		EliminationWeek=-1
	}
};

struct SeasonMatch
{
	var databinding int Week;
	var databinding int Team0;
	var databinding int Team1;
	var databinding int Score0;
	var databinding int Score1;
	var databinding int Winner;
	var bool bBye;

	structdefaultproperties
	{
		Week=0
		Team0=-1
		Team1=-1
		Score0=0
		Score1=0
		Winner=-1
		bBye=false
	}
};

struct native TurningCircle
{
	var Vector Center;
	var float Radius;

	structdefaultproperties
	{
		Center=(X=0.0,Y=0.0,Z=0.0)
		Radius=0.0
	}
};

struct native InputRate
{
	var() float RiseRate;
	var() float FallRate;

	structdefaultproperties
	{
		RiseRate=5.0
		FallRate=5.0
	}
};

struct native ThumbnailComponent
{
	var export editinline ActorComponent Component;
	var Matrix BaseTransform;
	var name Tag;

	structdefaultproperties
	{
		Component=none
		BaseTransform=(XPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0),YPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0),ZPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0),WPlane=(X=0.0,Y=0.0,Z=0.0,W=0.0))
		Tag=None
	}
};

struct native OnlineProductAttribute
{
	var name Key;
	var string Value;

	structdefaultproperties
	{
		Key=None
		Value=""
	}
};

struct native OnlineProductData
{
	var int ProductID;
	var ProductInstanceID InstanceID;
	var int SeriesID;
	var array<OnlineProductAttribute> Attributes;
	var int TradeHold;
	var Qword AddedTimestamp;

	structdefaultproperties
	{
		ProductID=0
		
		SeriesID=0
		Attributes.Empty
		TradeHold=0
		
	}
};

struct native OnlineXPModifier
{
	var databinding name Name;
	var databinding float Modifier;
	var databinding EOnlineXPModifierType ModifierType;
	var databinding int Value;
	var databinding string LocalizedText;
	var databinding bool bPremium;
	var databinding bool bPenalty;
	var databinding bool bPromo;
	var databinding int Remaining;
	var databinding int Count;
	var databinding int MaxCount;

	structdefaultproperties
	{
		Name=None
		Modifier=0.0
		ModifierType=OnlineXPModifier_Additive
		Value=0
		LocalizedText=""
		bPremium=false
		bPenalty=false
		bPromo=false
		Remaining=0
		Count=0
		MaxCount=0
	}
};

struct native OnlineXPReward
{
	var name RewardName;
	var float Total;
	var int Base;
	var int BaseLevel;
	var int Level;
	var int CapAdjustment;
	var array<int> LevelThresholds;
	var array<OnlineXPModifier> RewardModifiers;

	structdefaultproperties
	{
		RewardName=None
		Total=0.0
		Base=0
		BaseLevel=0
		Level=0
		CapAdjustment=0
		LevelThresholds.Empty
		RewardModifiers.Empty
	}
};

struct OnlineReward
{
	var int Id;
	var array<OnlineProductData> ProductData;
	var array<OnlineXPReward> RewardDrops;

	structdefaultproperties
	{
		Id=0
		ProductData.Empty
		RewardDrops.Empty
	}
};

struct RocketPassBundleInfo
{
	var databinding transient int PurchasableID;
	var databinding transient int KeyCost;
	var databinding transient int OriginalKeyCost;
	var databinding transient int OriginalCurrencyCost;
	var databinding transient int CurrencyID;
	var databinding transient int CurrencyCost;
	var databinding transient int Tiers;
	var databinding transient int Savings;
	var databinding Texture Image;
	var transient string ImageURL;

	structdefaultproperties
	{
		PurchasableID=0
		KeyCost=0
		OriginalKeyCost=0
		OriginalCurrencyCost=0
		CurrencyID=0
		CurrencyCost=0
		Tiers=0
		Savings=0
		Image=none
		ImageURL=""
	}
};

struct RocketPassStore
{
	var transient array<RocketPassBundleInfo> Tiers;
	var transient array<RocketPassBundleInfo> Bundles;

	structdefaultproperties
	{
		Tiers.Empty
		Bundles.Empty
	}
};

struct RocketPassInfo
{
	var transient int TierLevel;
	var transient bool bOwnsPremium;
	var transient float XPMultiplier;

	structdefaultproperties
	{
		TierLevel=0
		bOwnsPremium=false
		XPMultiplier=0.0
	}
};

struct XPRewardData
{
	var databinding name Name;
	var databinding float Amount;

	structdefaultproperties
	{
		Name=None
		Amount=0.0
	}
};

struct native CurrencyProductData
{
	var Product_TA Product;
	var OnlineProduct_TA OnlineProduct;

	structdefaultproperties
	{
		Product=none
		OnlineProduct=none
	}
};

struct native Currency
{
	var int /** _Types_TA.ECurrency*/ Type;
	var name Name;
	var bool bCanBeTraded;
	var int TradeHold;
	var CurrencyProductData ProductData;
	var databinding int CurrencyID;
	var databinding int Id;
	var databinding int Amount;
	var databinding Texture LargeImage;
	var databinding Texture SmallImage;
	var databinding string LocalizedName;
	var Qword UpdatedTimestamp;

	structdefaultproperties
	{
		Type=0
		Name=None
		bCanBeTraded=false
		TradeHold=0
		ProductData=(Product=none,OnlineProduct=none)
		CurrencyID=0
		Id=0
		Amount=0
		LargeImage=none
		SmallImage=none
		LocalizedName=""
		
	}
};

struct RocketPassRewardData
{
	var int Tier;
	var array<OnlineProductData> ProductData;
	var array<XPRewardData> XPRewards;
	var array<Currency> CurrencyDrops;

	structdefaultproperties
	{
		Tier=0
		ProductData.Empty
		XPRewards.Empty
		CurrencyDrops.Empty
	}
};

struct RocketPassUnlock
{
	var int Tier;
	var array<OnlineProductData> ProductData;
	var array<OnlineXPReward> RewardDrops;
	var array<Currency> CurrencyDrops;

	structdefaultproperties
	{
		Tier=0
		ProductData.Empty
		RewardDrops.Empty
		CurrencyDrops.Empty
	}
};

struct RocketPassTierBonusRange
{
	var databinding int Start;
	var databinding int End;
	var databinding int Bonus;

	structdefaultproperties
	{
		Start=0
		End=0
		Bonus=0
	}
};

struct native ProductFilter
{
	var array<OnlineProduct_TA> OnlineProducts;
	var array<Product_TA> Products;
	var array<ProductHashID> ArchivedProducts;
	var string Label;
	var array<int> Slots;
	var array<ProductSlot_TA> ProhibitedSlots;
	var array<EProductQuality> ExclusiveQualities;
	var array<EProductQuality> ProhibitedQualities;
	var array<EUnlockMethod> UnlockMethods;
	var array<EProductTradeRestriction> TradeRestrictions;
	var array<int> TradeHoldRestrictions;
	var array< class > ExclusiveAttributes;
	var array< class > ProhibitedAttributes;
	var EProductFilterSortType SortType;
	var array<int> SeriesIDs;
	var ProductHashID PackHashID;
	var bool bExcludePacks;
	var bool bIgnoreEquipped;
	var bool bIgnoreLicensedCars;
	var bool bStackProducts;
	var bool bAllowEquippedArchivedProducts;
	var array<int> Loadout;
	var array<ProductHashID> EquippedHashIDs;
	var byte LogLevel;
	var EArchiveProductFilter ArchivedProductFilter;
	var array<EBlueprintType> ProhibitedBlueprints;
	var array<EProductFilterSortType> ProhibitedSortTypes;
	var array< class > ProhibitedAttributeSortTypes;
	var array<int> PaintIDs;

	structdefaultproperties
	{
		OnlineProducts.Empty
		Products.Empty
		ArchivedProducts.Empty
		Label=""
		Slots.Empty
		ProhibitedSlots.Empty
		ExclusiveQualities.Empty
		ProhibitedQualities.Empty
		UnlockMethods.Empty
		TradeRestrictions.Empty
		TradeHoldRestrictions.Empty
		ExclusiveAttributes.Empty
		ProhibitedAttributes.Empty
		SortType=ProductFilterSortType_Alphabetical
		SeriesIDs.Empty
		PackHashID=(Id=-1)
		bExcludePacks=false
		bIgnoreEquipped=false
		bIgnoreLicensedCars=false
		bStackProducts=true
		bAllowEquippedArchivedProducts=false
		Loadout.Empty
		EquippedHashIDs.Empty
		LogLevel=0
		ArchivedProductFilter=ArchiveFilter_ExcludeArchivedProducts
		ProhibitedBlueprints.Empty
		ProhibitedSortTypes.Empty
		ProhibitedAttributeSortTypes.Empty
		PaintIDs.Empty
	}
};

struct SchematicResourceData
{
	var databinding ProductInstanceID InstanceID;
	var databinding int Resources;

	structdefaultproperties
	{
		
		Resources=1
	}
};

struct native RandomRange
{
	var() float Min;
	var() float Max;

	structdefaultproperties
	{
		Min=0.0
		Max=0.0
	}
};

struct native LoadoutTeamColor
{
	var byte Team;
	var byte TeamColorID;
	var byte CustomColorID;
	var bool bSet;

	structdefaultproperties
	{
		Team=0
		TeamColorID=0
		CustomColorID=0
		bSet=false
	}
};

struct native LoadoutTeamPaint extends _Types_TA.LoadoutTeamColor
{
	var int TeamFinishID;
	var int CustomFinishID;
};

struct native ClientLoadoutData
{
	var array<int> Products;

	structdefaultproperties
	{
		Products.Empty
	}
};

struct native ClientLoadoutOnlineProduct
{
	var array<ProductAttribute_TA> Attributes;

	structdefaultproperties
	{
		Attributes.Empty
	}
};

struct native ClientLoadoutOnlineData
{
	var array<ClientLoadoutOnlineProduct> Products;

	structdefaultproperties
	{
		Products.Empty
	}
};

struct native LoadoutData extends _Types_TA.ClientLoadoutData
{
	var LoadoutTeamPaint TeamPaint;
	var name Title;
	var int TeamIndex;
	var array<ProductInstanceID> OnlineProducts;

	structdefaultproperties
	{
		Title=XP
	}
};

struct native LoadoutProductData
{
	var int SlotIndex;
	var int ProductID;
	var ProductInstanceID InstanceID;
	var array<ProductAttribute_TA> Attributes;

	structdefaultproperties
	{
		SlotIndex=0
		ProductID=0
		
		Attributes.Empty
	}
};

struct native ServerSetLoadoutTeam
{
	var array<LoadoutProductData> Products;
	var LoadoutTeamPaint TeamPaint;

	structdefaultproperties
	{
		Products.Empty
		TeamPaint=(TeamFinishID=0,CustomFinishID=0,Team=0,TeamColorID=0,CustomColorID=0,bSet=false)
	}
};

struct native ServerSetLoadoutParams
{
	var name Title;
	var ServerSetLoadoutTeam Loadouts[2];

	structdefaultproperties
	{
		Title=XP
		Loadouts[0]=(Products=none,TeamPaint=(TeamFinishID=0,CustomFinishID=0,Team=0,TeamColorID=0,CustomColorID=0,bSet=false))
		Loadouts[1]=(Products=none,TeamPaint=(TeamFinishID=0,CustomFinishID=0,Team=0,TeamColorID=0,CustomColorID=0,bSet=false))
	}
};

struct ProductAttributesArray
{
	var array<ProductAttribute_TA> Attributes;

	structdefaultproperties
	{
		Attributes.Empty
	}
};

struct LoadoutAttributesArray
{
	var array<ProductAttributesArray> Products;

	structdefaultproperties
	{
		Products.Empty
	}
};

struct native VehicleInputs
{
	var() float Throttle;
	var() float Steer;
	var() float Pitch;
	var() float Yaw;
	var() float Roll;
	var() float DodgeForward;
	var() float DodgeRight;
	var() bool bHandbrake;
	var() bool bJump;
	var() bool bActivateBoost;
	var() bool bHoldingBoost;
	var bool bJumped;
	var bool bGrab;
	var bool bButtonMash;

	structdefaultproperties
	{
		Throttle=0.0
		Steer=0.0
		Pitch=0.0
		Yaw=0.0
		Roll=0.0
		DodgeForward=0.0
		DodgeRight=0.0
		bHandbrake=false
		bJump=false
		bActivateBoost=false
		bHoldingBoost=false
		bJumped=false
		bGrab=false
		bButtonMash=false
	}
};

struct native ClientFrameData
{
	var VehicleInputs VehicleInput;
	var int frame;
	var float TimeStamp;

	structdefaultproperties
	{
		VehicleInput=(Throttle=0.0,Steer=0.0,Pitch=0.0,Yaw=0.0,Roll=0.0,DodgeForward=0.0,DodgeRight=0.0,bHandbrake=false,bJump=false,bActivateBoost=false,bHoldingBoost=false,bJumped=false,bGrab=false,bButtonMash=false)
		frame=0
		TimeStamp=0.0
	}
};

struct native MessageValue
{
	var string StringValue;
	var int IntValue;
	var Object ObjectValue;
	var name NameValue;
	var int ValueType;

	structdefaultproperties
	{
		StringValue=""
		IntValue=0
		ObjectValue=none
		NameValue=None
		ValueType=0
	}
};

struct native MessagePacket
{
	var const Message_TA Message;
	var const array<MessageValue> Values;

	structdefaultproperties
	{
		Message=none
		Values.Empty
	}
};

struct native BallHitInfo
{
	var PRI_TA PRI;
	var PRI_TA AttackerPRI;
	var name CarName;
	var int TeamNum;
	var ReplicatedRBState PreHitCarPhysics;
	var ReplicatedRBState PreHitBallPhysics;
	var ReplicatedRBState PostHitBallPhysics;
	var float Distance;
	var float Time;
	var Vector HitLocation;
	var Vector HitNormal;
	var bool bDodging;
	var bool bWheelsTouching;
	var bool bWorldTouching;
	var EBallHitType HitType;
	var int HitID;

	structdefaultproperties
	{
		PRI=none
		AttackerPRI=none
		CarName=None
		TeamNum=0
		PreHitCarPhysics=(Quaternion=(X=0.0,Y=0.0,Z=0.0,W=0.0),Location=(X=0.0,Y=0.0,Z=0.0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),Time=0.0,bSleeping=false,bNewData=false)
		PreHitBallPhysics=(Quaternion=(X=0.0,Y=0.0,Z=0.0,W=0.0),Location=(X=0.0,Y=0.0,Z=0.0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),Time=0.0,bSleeping=false,bNewData=false)
		PostHitBallPhysics=(Quaternion=(X=0.0,Y=0.0,Z=0.0,W=0.0),Location=(X=0.0,Y=0.0,Z=0.0),LinearVelocity=(X=0.0,Y=0.0,Z=0.0),AngularVelocity=(X=0.0,Y=0.0,Z=0.0),Time=0.0,bSleeping=false,bNewData=false)
		Distance=0.0
		Time=0.0
		HitLocation=(X=0.0,Y=0.0,Z=0.0)
		HitNormal=(X=0.0,Y=0.0,Z=0.0)
		bDodging=false
		bWheelsTouching=false
		bWorldTouching=false
		HitType=HitType_Item0
		HitID=0
	}
};

struct TAPlayerStat
{
	var StatEvent_TA StatEvent;
	var int Count;

	structdefaultproperties
	{
		StatEvent=none
		Count=0
	}
};

struct StatValue
{
	var name Id;
	var int Values[ETAStatType];

	structdefaultproperties
	{
		Id=None
		Values[0]=0
		Values[1]=0
		Values[2]=0
	}
};

struct native AccumulatedRigidBodyCollision
{
	var Actor Actor;
	var export editinline PrimitiveComponent Component;
	var PhysicalMaterial PhysMat;
	var Vector Velocity;
	var Vector OtherVelocity;
	var Vector Location;
	var Vector Normal;
	var Vector NormalForce;
	var Vector FrictionForce;
	var Vector NormalVelocity;
	var Vector FrictionVelocity;
	var int NumCollisions;
	var int NumContacts;

	structdefaultproperties
	{
		Actor=none
		Component=none
		PhysMat=none
		Velocity=(X=0.0,Y=0.0,Z=0.0)
		OtherVelocity=(X=0.0,Y=0.0,Z=0.0)
		Location=(X=0.0,Y=0.0,Z=0.0)
		Normal=(X=0.0,Y=0.0,Z=0.0)
		NormalForce=(X=0.0,Y=0.0,Z=0.0)
		FrictionForce=(X=0.0,Y=0.0,Z=0.0)
		NormalVelocity=(X=0.0,Y=0.0,Z=0.0)
		FrictionVelocity=(X=0.0,Y=0.0,Z=0.0)
		NumCollisions=0
		NumContacts=0
	}
};

struct native ProductAttachment
{
	var() StaticMesh StaticMesh;
	var() SkeletalMesh SkeletalMesh;
	var() ParticleSystem ParticleSystem;
	var() MaterialInterface Material;
	var() float Scale;
	var() Vector Translation;
	var() Rotator Rotation;
	var() EProductAttachmentSocket Socket;
	var() export editinline AntennaComponent_TA Antenna;
	var() editinline array<editinline AttachmentBehavior_TA> Behaviors;
	var() editinline ProductAttribute_InheritCarSetting_TA InheritCarAttribute;
	var() export editinline PrimitiveComponent Component;
	var() FXActor_X FXActor;

	structdefaultproperties
	{
		StaticMesh=none
		SkeletalMesh=none
		ParticleSystem=none
		Material=none
		Scale=1.0
		Translation=(X=0.0,Y=0.0,Z=0.0)
		Rotation=(Pitch=0,Yaw=0,Roll=0)
		Socket=PAS_Hat
		Antenna=none
		Behaviors.Empty
		InheritCarAttribute=none
		Component=none
		FXActor=none
	}
};

struct native WheelAttachment
{
	var() export editinline PrimitiveComponent Component;
	var() editinline array<editinline AttachmentBehavior_TA> Behaviors;
	var() name Socket;
	var() array<MaterialInterface> PaintableMaterials;

	structdefaultproperties
	{
		Component=none
		Behaviors.Empty
		Socket=None
		PaintableMaterials.Empty
	}
};

struct native WheelContactData
{
	var bool bHasContact;
	var bool bHasContactWithWorldGeometry;
	var float HasContactChangeTime;
	var Actor Actor;
	var export editinline PrimitiveComponent Component;
	var Vector Location;
	var Vector Normal;
	var Vector LatDirection;
	var Vector LongDirection;
	var PhysicalMaterialProperty_TA PhysMatProp;

	structdefaultproperties
	{
		bHasContact=false
		bHasContactWithWorldGeometry=false
		HasContactChangeTime=0.0
		Actor=none
		Component=none
		Location=(X=0.0,Y=0.0,Z=0.0)
		Normal=(X=0.0,Y=0.0,Z=0.0)
		LatDirection=(X=0.0,Y=0.0,Z=0.0)
		LongDirection=(X=0.0,Y=0.0,Z=0.0)
		PhysMatProp=none
	}
};

struct native SimpleSpringSettings
{
	var() Vector Strength;
	var() Vector Damping;
	var() Vector MaxDisplacement;
	var() bool bUseMinDisplacement;
	var() Vector MinDisplacement;
	var() float Mass;
	var() Vector MassOffset;
	var() float MaxSpeed;
	var(Debug) bool bDebug;
	var(Debug) float DrawDebugOffset;

	structdefaultproperties
	{
		Strength=(X=100.0,Y=100.0,Z=100.0)
		Damping=(X=5.0,Y=5.0,Z=5.0)
		MaxDisplacement=(X=50.0,Y=50.0,Z=50.0)
		bUseMinDisplacement=false
		MinDisplacement=(X=0.0,Y=0.0,Z=0.0)
		Mass=1.0
		MassOffset=(X=0.0,Y=0.0,Z=0.0)
		MaxSpeed=3000.0
		bDebug=false
		DrawDebugOffset=0.0
	}
};

struct UIProductSlotData
{
	var() ProductSlot_TA Slot;
	var() Texture2D Texture;
	var() AkSoundCue Sound;

	structdefaultproperties
	{
		Slot=none
		Texture=none
		Sound=none
	}
};

struct SimilarLogoGroup
{
	var() array<ProductAsset_Logo_TA> SimilarLogoColorAssets;

	structdefaultproperties
	{
		SimilarLogoColorAssets.Empty
	}
};

struct GameModeData
{
	var databinding int GameMode;
	var databinding string LocalizedName;

	structdefaultproperties
	{
		GameMode=0
		LocalizedName=""
	}
};

struct native ReportedPlayerInfo
{
	var UniqueNetId Reporter;
	var UniqueNetId Offender;
	var array<int> ReasonIDs;
	var float ReportTimeStamp;

	structdefaultproperties
	{
		
		
		ReasonIDs.Empty
		ReportTimeStamp=0.0
	}
};

struct native PlayerChatMessage
{
	var float MessageTimeStamp;
	var UniqueNetId PlayerID;
	var EChatChannel ChatChannel;
	var int Team;
	var string Message;

	structdefaultproperties
	{
		MessageTimeStamp=0.0
		
		ChatChannel=EChatChannel_Match
		Team=0
		Message=""
	}
};

struct native ChatBanInfo
{
	var Qword Expiration;
	var bool bPermanentlyBanned;

	structdefaultproperties
	{
		
		bPermanentlyBanned=false
	}
};

struct UniqueNetIdGroup4
{
	var UniqueNetId PlayerIds[4];

	structdefaultproperties
	{
	}
};

struct native MaterialTextureParam
{
	var() name Name;
	var() Texture Value;

	structdefaultproperties
	{
		Name=None
		Value=none
	}
};

struct native MaterialVectorParam
{
	var() name Name;
	var() LinearColor Value;

	structdefaultproperties
	{
		Name=None
		Value=(R=0.0,G=0.0,B=0.0,A=1.0)
	}
};

struct native MaterialScalarParam
{
	var() name Name;
	var() float Value;

	structdefaultproperties
	{
		Name=None
		Value=0.0
	}
};

struct native MaterialParams
{
	var() array<MaterialTextureParam> TextureParameters;
	var() array<MaterialVectorParam> VectorParameters;
	var() array<MaterialScalarParam> ScalarParameters;

	structdefaultproperties
	{
		TextureParameters.Empty
		VectorParameters.Empty
		ScalarParameters.Empty
	}
};

struct native AssociativeMaterialParams
{
	var() editconst MaterialInterface Material;
	var() MaterialParams Params;

	structdefaultproperties
	{
		Material=none
		Params=(TextureParameters=none,VectorParameters=none,ScalarParameters=none)
	}
};

struct native AssetLoadResult
{
	var int ProductID;
	var name AssetName;
	var ProductAsset_TA Asset;
	var ProductThumbnailAsset_TA ThumbnailAsset;

	structdefaultproperties
	{
		ProductID=0
		AssetName=None
		Asset=none
		ThumbnailAsset=none
	}
};

struct native ProductThumbnailResult
{
	var ProductAsset_TA Asset;
	var OnlineProduct_TA OnlineProduct;
	var ProductThumbnail_TA Thumbnail;

	structdefaultproperties
	{
		Asset=none
		OnlineProduct=none
		Thumbnail=none
	}
};

struct native MapImageLoadResult
{
	var Texture2D Image;
	var name MapName;

	structdefaultproperties
	{
		Image=none
		MapName=None
	}
};

struct native WeldingInfo
{
	var RBActor_TA RBActor;
	var Vector Offset;
	var float Mass;
	var Rotator Rotation;

	structdefaultproperties
	{
		RBActor=none
		Offset=(X=0.0,Y=0.0,Z=0.0)
		Mass=0.0
		Rotation=(Pitch=0,Yaw=0,Roll=0)
	}
};

struct RandomWeight
{
	var Object Obj;
	var float Weight;
	var float OrigWeight;

	structdefaultproperties
	{
		Obj=none
		Weight=1.0
		OrigWeight=0.0
	}
};

struct native SaveObjectResult
{
	var Object ObjectData;
	var Error Error;
	var ESaveGameResult Code;

	structdefaultproperties
	{
		ObjectData=none
		Error=none
		Code=SaveGameResult_Pending
	}
};

struct native LoadObjectResult
{
	var string FilePath;
	var Object ObjectData;
	var Error Error;
	var EBasicLoadResult Code;

	structdefaultproperties
	{
		FilePath=""
		ObjectData=none
		Error=none
		Code=BasicLoadResult_Pending
	}
};

struct EditorRoundData
{
	var databinding float TimeLimit;
	var array<string> SerializedArchetypes;

	structdefaultproperties
	{
		TimeLimit=10.0
		SerializedArchetypes.Empty
	}
};

struct native SortedProductData
{
	var ProductInstanceID Id;
	var ProductHashID HashID;
	var Product_TA Product;
	var OnlineProduct_TA OnlineProduct;
	var int BlueprintSortWeight;
	var int Quantity;
	var bool bUnlocked;
	var bool bIsFavorited;
	var bool bCurrency;

	structdefaultproperties
	{
		
		HashID=(Id=0)
		Product=none
		OnlineProduct=none
		BlueprintSortWeight=0
		Quantity=0
		bUnlocked=false
		bIsFavorited=false
		bCurrency=false
	}
};

struct ActorHistory
{
	var name Name;
	var EHistory Type;
	var string SerializedHistory;

	structdefaultproperties
	{
		Name=None
		Type=H_None
		SerializedHistory=""
	}
};

struct StatData
{
	var name EventName;
	var int Count;

	structdefaultproperties
	{
		EventName=None
		Count=0
	}
};

struct native QuickChatGroup
{
	var string Key;
	var int Count;

	structdefaultproperties
	{
		Key=""
		Count=0
	}
};

struct OnlinePlayerMatchData
{
	var transient PRI_TA PRI;
	var UniqueNetId PlayerID;
	var float GameSecondsPlayed;
	var int GameScore;
	var int MatchGoals;
	var int MatchAssists;
	var int MatchSaves;
	var int MatchShots;
	var int XPGained;
	var array<OnlineProductData> Loadout;
	var bool bCompletedMatch;
	var bool bForfeit;
	var bool bMvp;
	var bool bWinner;
	var bool bLeaver;
	var bool bInParty;
	var bool bJoinedInProgress;
	var int ConsecutiveMatchesPlayed;
	var UniqueNetId PartyLeader;
	var float DistanceDrivenKM;
	var bool bPartyLeaderValid;
	var int TeamIndex;
	var array<StatData> Stats;
	var array<LoadoutData> TeamLoadouts;
	var array<QuickChatGroup> QuickChat;
	var bool ForceDrop;
	var bool PreventDrop;

	structdefaultproperties
	{
		PRI=none
		
		GameSecondsPlayed=0.0
		GameScore=0
		MatchGoals=0
		MatchAssists=0
		MatchSaves=0
		MatchShots=0
		XPGained=0
		Loadout.Empty
		bCompletedMatch=false
		bForfeit=false
		bMvp=false
		bWinner=false
		bLeaver=false
		bInParty=false
		bJoinedInProgress=false
		ConsecutiveMatchesPlayed=0
		
		DistanceDrivenKM=0.0
		bPartyLeaderValid=false
		TeamIndex=-1
		Stats.Empty
		TeamLoadouts.Empty
		QuickChat.Empty
		ForceDrop=false
		PreventDrop=false
	}
};

struct native BallPredictionInfo
{
	var float Time;
	var float ArchTopTime;
	var Vector Location;
	var Vector Velocity;
	var Vector ArchTop;
	var Vector ArchTopVelocity;
	var bool bHitWall;
	var bool bHitGround;

	structdefaultproperties
	{
		Time=0.0
		ArchTopTime=0.0
		Location=(X=0.0,Y=0.0,Z=0.0)
		Velocity=(X=0.0,Y=0.0,Z=0.0)
		ArchTop=(X=0.0,Y=0.0,Z=0.0)
		ArchTopVelocity=(X=0.0,Y=0.0,Z=0.0)
		bHitWall=false
		bHitGround=false
	}
};

struct native ProductLevelData
{
	var() databinding int Level;
	var() databinding int SoftCurrency;
	var() databinding int HardCurrency;
	var() databinding float UnlockWeight;

	structdefaultproperties
	{
		Level=0
		SoftCurrency=0
		HardCurrency=0
		UnlockWeight=0.0
	}
};

struct native PaintAttributeParameter
{
	var() EPaintColorVariant PaintVariant;
	var() name ParameterName;
	var() bool bEnabled;
	var() bool bGammaCorrect;

	structdefaultproperties
	{
		PaintVariant=PaintColorVariant_Primary
		ParameterName=None
		bEnabled=false
		bGammaCorrect=false
	}
};

struct native AppliedBreakoutDamage
{
	var byte Id;
	var Vector Location;
	var int DamageIndex;
	var int TotalDamage;

	structdefaultproperties
	{
		Id=0
		Location=(X=0.0,Y=0.0,Z=0.0)
		DamageIndex=0
		TotalDamage=0
	}
};

struct IntroCarInfo
{
	var() int TemplateIndex;
	var() string TemplateName;
	var() string TemplateDescription;

	structdefaultproperties
	{
		TemplateIndex=0
		TemplateName=""
		TemplateDescription=""
	}
};

struct EditorIntroCar
{
	var() IntroCarInfo Info;
	var() array<Product_TA> ProductList;

	structdefaultproperties
	{
		Info=(TemplateIndex=0,TemplateName="",TemplateDescription="")
		ProductList.Empty
	}
};

struct RPCIntroCar
{
	var int TemplateIndex;
	var string TemplateName;
	var string TemplateDescription;
	var array<int> ProductsList;

	structdefaultproperties
	{
		TemplateIndex=0
		TemplateName=""
		TemplateDescription=""
		ProductsList.Empty
	}
};

struct native ProductDrop
{
	var databinding ProductHashID GroupId;
	var databinding ProductInstanceID DropID;
	var databinding Qword DropTime;
	var databinding bool bCanEquipNow;

	structdefaultproperties
	{
		GroupId=(Id=0)
		
		
		bCanEquipNow=false
	}
};

struct GarageSlotCost
{
	var databinding int Id;
	var databinding int Amount;

	structdefaultproperties
	{
		Id=0
		Amount=0
	}
};

struct ChallengeRequirementProgress
{
	var int ProgressCount;
	var int ProgressChange;

	structdefaultproperties
	{
		ProgressCount=0
		ProgressChange=0
	}
};

struct ChallengeProgress
{
	var int Id;
	var bool bIsHidden;
	var int CompleteCount;
	var bool bNotifyCompleted;
	var bool bNotifyAvailable;
	var bool bNotifyNewInfo;
	var bool bRewardsAvailable;
	var bool bComplete;
	var Qword ProgressResetTimeUTC;
	var array<ChallengeRequirementProgress> RequirementProgress;

	structdefaultproperties
	{
		Id=0
		bIsHidden=false
		CompleteCount=0
		bNotifyCompleted=false
		bNotifyAvailable=false
		bNotifyNewInfo=false
		bRewardsAvailable=false
		bComplete=false
		
		RequirementProgress.Empty
	}
};

struct OnlineProductDrop
{
	var UniqueNetId PlayerID;
	var array<OnlineProductData> ProductData;
	var array<Currency> CurrencyData;
	var array<OnlineXPReward> RewardDrops;

	structdefaultproperties
	{
		
		ProductData.Empty
		CurrencyData.Empty
		RewardDrops.Empty
	}
};

struct native SkinBodySettings
{
	var() editinline ProductAssetReferenceBody_TA Body;
	var() MaterialParams Parameters;
	var() editfixedsize array<AssociativeMaterialParams> AdditionalBodyParameters;

	structdefaultproperties
	{
		Body=none
		Parameters=(TextureParameters=none,VectorParameters=none,ScalarParameters=none)
		AdditionalBodyParameters.Empty
	}
};

struct MapSkillSettings
{
	var() name MapName;
	var() float MinimumSkill;

	structdefaultproperties
	{
		MapName=None
		MinimumSkill=0.0
	}
};

struct TeamColor
{
	var LinearColor FontColor;
	var array<LinearColor> Colors;

	structdefaultproperties
	{
		FontColor=(R=0.0,G=0.0,B=0.0,A=1.0)
		Colors.Empty
	}
};

struct ColorOverride
{
	var bool bOverride;
	var LinearColor Color;

	structdefaultproperties
	{
		bOverride=false
		Color=(R=0.0,G=0.0,B=0.0,A=1.0)
	}
};

struct ProductTradeInFilter
{
	var int Id;
	var string Label;
	var array<int> SeriesIDs;
	var bool bBlueprint;
	var array<EProductQuality> TradeInQualities;

	structdefaultproperties
	{
		Id=0
		Label=""
		SeriesIDs.Empty
		bBlueprint=false
		TradeInQualities(0)=67
		TradeInQualities(1)=57
		TradeInQualities(2)=0
		TradeInQualities(3)=0
		TradeInQualities(4)=0
	}
};

struct native ProductWithSettings
{
	var() ProductAsset_TA Product;
	var() ProductPaint_TA Paint;
	var() DataAsset_ESportsTeam_TA ESportsTeam;

	structdefaultproperties
	{
		Product=none
		Paint=none
		ESportsTeam=none
	}
};

struct native PlayerIdArray
{
	var array<UniqueNetId> Players;

	structdefaultproperties
	{
		Players.Empty
	}
};

struct VoiceRoomTokenRequest
{
	var string RoomId;
	var array<UniqueNetId> PlayerIds;

	structdefaultproperties
	{
		RoomId=""
		PlayerIds.Empty
	}
};

struct native VoiceRoomCredentials
{
	var string RoomId;
	var string BaseUrl;
	var string Token;

	structdefaultproperties
	{
		RoomId=""
		BaseUrl=""
		Token=""
	}
};

struct PlayerVoiceRoomCredentials extends _Types_TA.VoiceRoomCredentials
{
	var UniqueNetId PlayerID;

	structdefaultproperties
	{
		
	}
};

struct ActivePlayerVoice
{
	var Qword StartTimestamp;
	var Qword EndTimestamp;
	var EActiveVoiceLocation Location;

	structdefaultproperties
	{
		
		
		Location=AVL_MainMenu
	}
};

struct VoiceRoomErrorMetric
{
	var name ErrorName;
	var Qword TimeStamp;

	structdefaultproperties
	{
		ErrorName=None
		
	}
};

struct VoiceRoomPlayerActivity
{
	var array<ActivePlayerVoice> ActiveVoiceSummary;
	var array<VoiceRoomErrorMetric> Errors;

	structdefaultproperties
	{
		ActiveVoiceSummary.Empty
		Errors.Empty
	}
};

struct VoiceRoomDetails
{
	var string RoomName;
	var EVoiceRoomType RoomType;
	var Qword CreatedTimestamp;
	var Qword DestroyedTimestamp;

	structdefaultproperties
	{
		RoomName=""
		RoomType=VRT_Invalid
		
		
	}
};

